
package hotello;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author VKONCHADA
 */
public class HotelTopskyBooking extends javax.swing.JFrame {

    /**
     * Creates new form HotelTopskyBooking
     */
    
    Statement stmt;
    
    int noOfRoomsReqd,occupied,vacant,days,rate,num,index;
    String name,pan,email,custName,booking_ID,phone;
    String new_id = "";
    String id,panno;
    //ResultSet rs;
    public HotelTopskyBooking() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        panTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        custNameTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        phoneTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        emailTF = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        noOfRoomsTF = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        roomTypeCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        noOfRoomsReqdTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        daysTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        chargesTF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bookingIDTF = new javax.swing.JTextField();
        servicesCB = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Booking");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("PAN Number");

        panTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panTF.setEnabled(false);
        panTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panTFActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Customer Name");

        custNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        custNameTF.setEnabled(false);
        custNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                custNameTFKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Phone  Number");

        phoneTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneTF.setEnabled(false);
        phoneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTFKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Email");

        emailTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailTF.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Number of rooms available");

        noOfRoomsTF.setEnabled(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Room Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        roomTypeCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ocean View", "Double Suite", "Executive", "Single" }));
        roomTypeCombo.setSelectedIndex(-1);
        roomTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(roomTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Book");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        noOfRoomsReqdTF.setEnabled(false);
        noOfRoomsReqdTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                noOfRoomsReqdTFFocusLost(evt);
            }
        });
        noOfRoomsReqdTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfRoomsReqdTFActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("No of rooms required");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("No of days of stay");

        daysTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        daysTF.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Charges");

        chargesTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chargesTF.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Booking ID");

        bookingIDTF.setEditable(false);
        bookingIDTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bookingIDTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingIDTFActionPerformed(evt);
            }
        });

        servicesCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        servicesCB.setText("Customer opted to view services");
        servicesCB.setEnabled(false);
        servicesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicesCBActionPerformed(evt);
            }
        });

        jMenu1.setText("Options");

        jMenuItem3.setText("Back");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem1.setText("Main Menu ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(servicesCB)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(custNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(phoneTF, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                                                    .addComponent(emailTF)
                                                    .addComponent(noOfRoomsTF)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(bookingIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(noOfRoomsReqdTF, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                        .addComponent(daysTF)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(51, 51, 51)
                                    .addComponent(chargesTF))
                                .addComponent(panTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookingIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(panTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(custNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneTF, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(noOfRoomsTF, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(noOfRoomsReqdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(daysTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chargesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(servicesCB)
                .addGap(14, 14, 14)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void custNameTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custNameTFKeyTyped
char ch=evt.getKeyChar();
if (((ch>='0') && (ch<='9')))
    evt.consume();
    }//GEN-LAST:event_custNameTFKeyTyped

    private void phoneTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTFKeyTyped
char ch=evt.getKeyChar();
if (!((ch>='0') && (ch<='9')))
    evt.consume();        
    }//GEN-LAST:event_phoneTFKeyTyped

    private void roomTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeComboActionPerformed

        
        
custNameTF.setEnabled(true);
phoneTF.setEnabled(true);
emailTF.setEnabled(true);
noOfRoomsTF.setEnabled(true);
noOfRoomsReqdTF.setEnabled(true);
daysTF.setEnabled(true);
chargesTF.setEnabled(true);
panTF.setEnabled(true);
jButton1.setEnabled(true);

num = 0;        
index= roomTypeCombo.getSelectedIndex();
     switch (index) {
            case 0:
                servicesCB.setEnabled(true);
                try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM OCEAN_VIEW;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              vacant = 32-occupied;
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
                
                rate = 7000;
                break;
            case 1:
                
                
                try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM DOUBLE_SUITE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              vacant = 32-occupied;
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
                rate = 5000;
                break;
            case 2:
                          try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM EXECUTIVE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              vacant = 16-occupied;
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
                
                rate = 3000;
                break;
            case 3:
                          try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM SINGLE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              vacant = 8-occupied;
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
 
                rate = 2000;
                break;
            default:
                break;
        }
switch(index)
     {
        case 0:
        
            try
            {
                  Class.forName("java.sql.DriverManager");
                  Connection con = (Connection)
                  DriverManager.getConnection
                             ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                  Statement stmt = (Statement) con.createStatement();
                  String query = "SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM OCEAN_VIEW WHERE BOOKING_ID LIKE 'OV%';";
                  String new_id = "";
                  String s;
                  ResultSet rs=stmt.executeQuery(query);

                 while (rs.next()) 
                 {
                       num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
                 }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "OV000" + num;
       //System.out.print(new_id); 
}

else if ((num > 9) && (num < 99)) 
{
    new_id = "OV00" + num;
}

else if ((num > 99) && (num < 999))
{
    new_id = "OV0" + num;
}

else if (num > 999)
{
    new_id = "OV" + num;
}

bookingIDTF.setText(new_id);
stmt.close();
} 
        
catch (Exception e)
   {
        JOptionPane.showMessageDialog(this, e.getMessage());
   }
            
  /*try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM OCEAN_VIEW;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
*/
   break;
            
   
   
        case 1:
                try
                    {
                          Class.forName("java.sql.DriverManager");
                          Connection con = (Connection)
                          DriverManager.getConnection
                                     ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                          Statement stmt = (Statement) con.createStatement();
                          String query="SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM DOUBLE_SUITE WHERE BOOKING_ID LIKE 'DS%';";
                          String new_id = "";
                          String s;
                          ResultSet rs=stmt.executeQuery(query);

while (rs.next()) 
     {
        num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
     }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "DS000" + num;
      // System.out.print(new_id);
   // bookingIDTF.setText("OV000" + num);
}
else if ((num > 9) && (num < 99))
{
    new_id = "DS00" + num;
}
else if ((num > 99) && (num < 999)) 
{
    new_id = "DS0" + num;
}
else if (num > 999)
{
    new_id = "DS" + num;
}

bookingIDTF.setText(new_id);
stmt.close();
}
                        
catch (Exception e)
    {
       JOptionPane.showMessageDialog(this, e.getMessage());
    } 
    /*   try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                        ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM DOUBLE_SUITE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }
     */    
       break;
                        
        case 2:
                try
                {
                     Class.forName("java.sql.DriverManager");
                     Connection con = (Connection)
                     DriverManager.getConnection
                               ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                     Statement stmt = (Statement) con.createStatement();
                     String query="SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM EXECUTIVE WHERE BOOKING_ID LIKE 'EX%';";
                     String new_id = " ";
                    // String s;
                     ResultSet rs=stmt.executeQuery(query);
//String num = rs.getString("BOOKING_ID");
//int num = rs.getInt("BOOKING_ID");
         while (rs.next()) 
            {
                num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
            }
//System.out.print(num);
num = num + 1;
if (num <= 9)
{
       new_id = "EX000" + num;
       //System.out.print(new_id);
   // bookingIDTF.setText("OV000" + num);
}
else if ((num > 9) && (num < 99))
{
    new_id = "EX00" + num;
}
else if ((num > 99) && (num < 999)) 
{
    new_id = "EX0" + num;
}
else if (num > 999)
{
    new_id = "EX" + num;
}

bookingIDTF.setText(new_id);  
stmt.close();
}
    catch (Exception e)
      {
           JOptionPane.showMessageDialog(this, e.getMessage());
      }
                
  /*    try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                 ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM EXECUTIVE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }      
    */            
        break; 
                        
                        
                        
        case 3:
               try
                   {
                       Class.forName("java.sql.DriverManager");
                       Connection con = (Connection)
                       DriverManager.getConnection
                               ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                       Statement stmt = (Statement) con.createStatement();
                       String query="SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM SINGLE WHERE BOOKING_ID LIKE 'OV%';";
                       String new_id = "";
                       //String s;
                       ResultSet rs=stmt.executeQuery(query);
//String num = rs.getString("BOOKING_ID");
//int num = rs.getInt("BOOKING_ID");
          while (rs.next()) 
           {
                num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
            }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "SG000" + num;
       //System.out.print(new_id);
   // bookingIDTF.setText("OV000" + num);
}
else if ((num > 9) && (num < 99))
{
    new_id = "SG00" + num;
}
else if ((num > 99) && (num < 999))
{
    new_id = "SG0" + num;
}
else if (num > 999)
{
    new_id = "SG" + num;
}

bookingIDTF.setText(new_id);
stmt.close();
}
      catch (Exception e)
        {
                JOptionPane.showMessageDialog(this, e.getMessage());
        }
               
  /*             try
     {
         Class.forName("java.sql.DriverManager");
         Connection con = (Connection)
         DriverManager.getConnection
                 ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
         Statement stmt = (Statement) con.createStatement();
         String query="SELECT COUNT(GUEST_NAME) FROM SINGLE;";
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery(query);
        
        if (rs.next())
          {
              String count=rs.getString("COUNT(Guest_Name)");
              occupied=Integer.parseInt(count);
              noOfRoomsTF.setText(""+vacant);
          }
     }

catch (Exception e)
  {
      JOptionPane.showMessageDialog(null,e);
  }*/
                break;                        
}
    }//GEN-LAST:event_roomTypeComboActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
noOfRoomsReqd = Integer.parseInt(noOfRoomsReqdTF.getText());

name=custNameTF.getText();
phone=phoneTF.getText();
email=emailTF.getText();

   /*     switch (index) {
            case 0:
                vacant = 32-occupied;
                rate = 7000;
                break;
            case 1:
                vacant = 32-occupied;
                rate = 5000;
                break;
            case 2:
                vacant = 16-occupied;
                rate = 3000;
                break;
            case 3:
                vacant = 8-occupied;
                rate = 2000;
                break;
            default:
                break;
        }*/
id= bookingIDTF.getText();
panno=panTF.getText();
        switch (index) {
            case 0:
                if (noOfRoomsReqd<=vacant)
                {
                    for(int i=1; i<=noOfRoomsReqd;i++){
                    try
                    {
                        Class.forName("java.sql.DriverManager");
                        Connection con=(Connection)
                                DriverManager.getConnection("jdbc:mysql://localhost:3306/Hotel_TopSky","root","12345");
                        Statement stmt=(Statement) con.createStatement();
                        String query="INSERT INTO OCEAN_VIEW VALUES ('"+id+"','"+name+"','"+phone+"','"+email+"','"+panno+"');";
                        stmt.executeUpdate(query);
                        
                    }
                    
                    catch (Exception e)
                    {
                        JOptionPane.showMessageDialog(this,e.getMessage());
                    }
                    
                    
                     try
            {
                  Class.forName("java.sql.DriverManager");
                  Connection con = (Connection)
                  DriverManager.getConnection
                             ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                  Statement stmt = (Statement) con.createStatement();
                  String query = "SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM OCEAN_VIEW WHERE BOOKING_ID LIKE 'OV%';";
                  String new_id = "";
                  String s;
                  ResultSet rs=stmt.executeQuery(query);

                 while (rs.next()) 
                 {
                       num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
                 }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "OV000" + num;
       //System.out.print(new_id); 
}

else if ((num > 9) && (num < 99)) 
{
    new_id = "OV00" + num;
}

else if ((num > 99) && (num < 999))
{
    new_id = "OV0" + num;
}

else if (num > 999)
{
    new_id = "OV" + num;
}

id=new_id;
stmt.close();
} 
        
catch (Exception e)
   {
        JOptionPane.showMessageDialog(this, e.getMessage());
   }
                }
                }            
                break;
            case 1:
                if (noOfRoomsReqd<=vacant)
                {for(int i=1; i<=noOfRoomsReqd;i++){
                    try
                    {
                        Class.forName("java.sql.DriverManager");
                        Connection con=(Connection)
                                DriverManager.getConnection("jdbc:mysql://localhost:3306/Hotel_TopSky","root","12345");
                        Statement stmt=(Statement) con.createStatement();
                        String query="INSERT INTO DOUBLE_SUITE VALUES ('"+id+"','"+name+"','"+phone+"','"+email+"','"+panno+"');";
                        stmt.executeUpdate(query);
                    }
                    
                    catch (Exception e)
                    {
                        JOptionPane.showMessageDialog(this,e.getMessage());
                    }
                    
                 
                     try
            {
                  Class.forName("java.sql.DriverManager");
                  Connection con = (Connection)
                  DriverManager.getConnection
                             ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                  Statement stmt = (Statement) con.createStatement();
                  String query = "SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM DOUBLE_SUITE WHERE BOOKING_ID LIKE 'DS%';";
                  String new_id = "";
                  String s;
                  ResultSet rs=stmt.executeQuery(query);

                 while (rs.next()) 
                 {
                       num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
                 }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "DS000" + num;
       //System.out.print(new_id); 
}

else if ((num > 9) && (num < 99)) 
{
    new_id = "DS00" + num;
}

else if ((num > 99) && (num < 999))
{
    new_id = "DS0" + num;
}

else if (num > 999)
{
    new_id = "DS" + num;
}

id=new_id;
stmt.close();
} 
        
catch (Exception e)
   {
        JOptionPane.showMessageDialog(this, e.getMessage());
   }
                    
                }
                }       
                break;
            case 2:
                if (noOfRoomsReqd<=vacant)
                {for(int i=1; i<=noOfRoomsReqd;i++){
                    try
                    {
                        Class.forName("java.sql.DriverManager");
                        Connection con=(Connection)
                                DriverManager.getConnection("jdbc:mysql://localhost:3306/Hotel_TopSky","root","12345");
                        Statement stmt=(Statement) con.createStatement();
                        String query="INSERT INTO EXECUTIVE VALUES ('"+id+"','"+name+"','"+phone+"','"+email+"','"+panno+"');";
                        stmt.executeUpdate(query);
                    }
                    
                    catch (Exception e)
                    {
                        JOptionPane.showMessageDialog(this,e.getMessage());
                    }
                    
            try
            {
                  Class.forName("java.sql.DriverManager");
                  Connection con = (Connection)
                  DriverManager.getConnection
                             ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                  Statement stmt = (Statement) con.createStatement();
                  String query = "SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM EXECUTIVE WHERE BOOKING_ID LIKE 'EX%';";
                  String new_id = "";
                  String s;
                  ResultSet rs=stmt.executeQuery(query);

                 while (rs.next()) 
                 {
                       num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
                 }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "EX000" + num;
       //System.out.print(new_id); 
}

else if ((num > 9) && (num < 99)) 
{
    new_id = "EX00" + num;
}

else if ((num > 99) && (num < 999))
{
    new_id = "EX0" + num;
}

else if (num > 999)
{
    new_id = "EX" + num;
}

id=new_id;
stmt.close();
} 
        
catch (Exception e)
   {
        JOptionPane.showMessageDialog(this, e.getMessage());
   }
     
                }
                }            
                break;
            case 3:
                if (noOfRoomsReqd<=vacant)
                {for(int i=1; i<=noOfRoomsReqd;i++){
                    try
                    {
                        Class.forName("java.sql.DriverManager");
                        Connection con=(Connection)
                                DriverManager.getConnection("jdbc:mysql://localhost:3306/Hotel_TopSky","root","12345");
                        Statement stmt=(Statement) con.createStatement();
                        String query="INSERT INTO SINGLE VALUES ('"+id+"','"+name+"','"+phone+"','"+email+"','"+panno+"');";
                        stmt.executeUpdate(query);
                    }
                    
                    catch (Exception e)
                    {
                        JOptionPane.showMessageDialog(this,e.getMessage());
                    }
                    
                                try
            {
                  Class.forName("java.sql.DriverManager");
                  Connection con = (Connection)
                  DriverManager.getConnection
                             ("jdbc:mysql://localhost:3306/Hotel_TopSky","root", "12345");
                  Statement stmt = (Statement) con.createStatement();
                  String query = "SELECT MAX(SUBSTR(BOOKING_ID,3)) FROM SINGLE WHERE BOOKING_ID LIKE 'SG%';";
                  String new_id = "";
                  String s;
                  ResultSet rs=stmt.executeQuery(query);

                 while (rs.next()) 
                 {
                       num = Integer.parseInt(rs.getString("MAX(SUBSTR(BOOKING_ID,3))"));
                 }
//System.out.print(num);
num = num + 1;
if (num <= 9) 
{
       new_id = "SG000" + num;
       //System.out.print(new_id); 
}

else if ((num > 9) && (num < 99)) 
{
    new_id = "SG00" + num;
}

else if ((num > 99) && (num < 999))
{
    new_id = "SG0" + num;
}

else if (num > 999)
{
    new_id = "SG" + num;
}

id=new_id;
stmt.close();
} 
        
catch (Exception e)
   {
        JOptionPane.showMessageDialog(this, e.getMessage());
   }
                }
                }
                break;
            
                
        }

days = Integer.parseInt(daysTF.getText());
int charges = days*rate*noOfRoomsReqd;
chargesTF.setText(""+charges);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void noOfRoomsReqdTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_noOfRoomsReqdTFFocusLost
noOfRoomsReqd = Integer.parseInt(noOfRoomsReqdTF.getText());
if (noOfRoomsReqd>vacant){
    JOptionPane.showMessageDialog(this,"Please enter the no of rooms as less then or equal to vacant rooms","Hotel Topsky",0);
    noOfRoomsReqdTF.setText("");
}
    }//GEN-LAST:event_noOfRoomsReqdTFFocusLost

    private void panTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_panTFActionPerformed

    private void noOfRoomsReqdTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfRoomsReqdTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfRoomsReqdTFActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        MainMenu frame1=new MainMenu();
        HotelTopskyBooking.this.setVisible(false);
        frame1.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
     RoomManagement frame1=new RoomManagement();
     HotelTopskyBooking.this.setVisible(false);
     frame1.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void bookingIDTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingIDTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookingIDTFActionPerformed

    private void servicesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicesCBActionPerformed
if (servicesCB.isSelected())
{
    Services frame1=new Services();
    HotelTopskyBooking.this.setVisible(false);
    frame1.setVisible(true);
    
booking_ID= bookingIDTF.getText();
custName= custNameTF.getText();
new Services(booking_ID, custName).setVisible(true);
}
    }//GEN-LAST:event_servicesCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelTopskyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelTopskyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelTopskyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelTopskyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HotelTopskyBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookingIDTF;
    private javax.swing.JTextField chargesTF;
    private javax.swing.JTextField custNameTF;
    private javax.swing.JTextField daysTF;
    private javax.swing.JTextField emailTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField noOfRoomsReqdTF;
    private javax.swing.JTextField noOfRoomsTF;
    private javax.swing.JTextField panTF;
    private javax.swing.JTextField phoneTF;
    private javax.swing.JComboBox<String> roomTypeCombo;
    private javax.swing.JCheckBox servicesCB;
    // End of variables declaration//GEN-END:variables
}
